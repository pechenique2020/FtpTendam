import { __decorate, __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FtpTendam = /** @class */ (function (_super) {
    __extends(FtpTendam, _super);
    function FtpTendam() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FtpTendam.prototype.connect = function (arg1, arg2, arg3) { return cordova(this, "connect", {}, arguments); };
    FtpTendam.prototype.uploadFile = function (arg1, arg2) { return cordova(this, "uploadFile", {}, arguments); };
    FtpTendam.prototype.findinventorydir = function (arg1) { return cordova(this, "findinventorydir", {}, arguments); };
    FtpTendam.prototype.uploadinventorydir = function (arg1, arg2) { return cordova(this, "uploadinventorydir", {}, arguments); };
    FtpTendam.prototype.moveinventorydir = function (arg1, arg2) { return cordova(this, "moveinventorydir", {}, arguments); };
    FtpTendam.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FtpTendam.pluginName = "FtpTendam";
    FtpTendam.plugin = "cordova-plugin-ftptendam";
    FtpTendam.pluginRef = "FtpTendam";
    FtpTendam.repo = "";
    FtpTendam.install = "";
    FtpTendam.installVariables = [];
    FtpTendam.platforms = ["android"];
    FtpTendam = __decorate([
        Injectable()
    ], FtpTendam);
    return FtpTendam;
}(IonicNativePlugin));
export { FtpTendam };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Z0cC10ZW5kYW0vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7OztHQVVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUEwRixNQUFNLG9CQUFvQixDQUFDOztJQWtDN0YsNkJBQWlCOzs7O0lBVTlDLDJCQUFPLGFBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZO0lBV2hELDhCQUFVLGFBQUMsSUFBWSxFQUFFLElBQVk7SUFVckMsb0NBQWdCLGFBQUMsSUFBWTtJQVc3QixzQ0FBa0IsYUFBQyxJQUFZLEVBQUUsSUFBWTtJQVc3QyxvQ0FBZ0IsYUFBQyxJQUFZLEVBQUUsSUFBWTtJQVMzQyw4QkFBVTs7Ozs7Ozs7SUE5REMsU0FBUztRQURyQixVQUFVLEVBQUU7T0FDQSxTQUFTO29CQTlDdEI7RUE4QytCLGlCQUFpQjtTQUFuQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGlzIGEgdGVtcGxhdGUgZm9yIG5ldyBwbHVnaW4gd3JhcHBlcnNcbiAqXG4gKiBUT0RPOlxuICogLSBBZGQvQ2hhbmdlIGluZm9ybWF0aW9uIGJlbG93XG4gKiAtIERvY3VtZW50IHVzYWdlIChpbXBvcnRpbmcsIGV4ZWN1dGluZyBtYWluIGZ1bmN0aW9uYWxpdHkpXG4gKiAtIFJlbW92ZSBhbnkgaW1wb3J0cyB0aGF0IHlvdSBhcmUgbm90IHVzaW5nXG4gKiAtIFJlbW92ZSBhbGwgdGhlIGNvbW1lbnRzIGluY2x1ZGVkIGluIHRoaXMgdGVtcGxhdGUsIEVYQ0VQVCB0aGUgQFBsdWdpbiB3cmFwcGVyIGRvY3MgYW5kIGFueSBvdGhlciBkb2NzIHlvdSBhZGRlZFxuICogLSBSZW1vdmUgdGhpcyBub3RlXG4gKlxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIENvcmRvdmFQcm9wZXJ0eSwgQ29yZG92YUluc3RhbmNlLCBJbnN0YW5jZVByb3BlcnR5LCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQG5hbWUgRnRwIFRlbmRhbVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBkb2VzIHNvbWV0aGluZ1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRnRwVGVuZGFtIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9mdHAtdGVuZGFtJztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmdHBUZW5kYW06IEZ0cFRlbmRhbSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuZnRwVGVuZGFtLmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRnRwVGVuZGFtJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZnRwdGVuZGFtJywgLy8gbnBtIHBhY2thZ2UgbmFtZSwgZXhhbXBsZTogY29yZG92YS1wbHVnaW4tY2FtZXJhXG4gIHBsdWdpblJlZjogJ0Z0cFRlbmRhbScsIC8vIHRoZSB2YXJpYWJsZSByZWZlcmVuY2UgdG8gY2FsbCB0aGUgcGx1Z2luLCBleGFtcGxlOiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb25cbiAgcmVwbzogJycsIC8vIHRoZSBnaXRodWIgcmVwb3NpdG9yeSBVUkwgZm9yIHRoZSBwbHVnaW5cbiAgaW5zdGFsbDogJycsIC8vIE9QVElPTkFMIGluc3RhbGwgY29tbWFuZCwgaW4gY2FzZSB0aGUgcGx1Z2luIHJlcXVpcmVzIHZhcmlhYmxlc1xuICBpbnN0YWxsVmFyaWFibGVzOiBbXSwgLy8gT1BUSU9OQUwgdGhlIHBsdWdpbiByZXF1aXJlcyB2YXJpYWJsZXNcbiAgcGxhdGZvcm1zOiBbJ2FuZHJvaWQnXSAvLyBBcnJheSBvZiBwbGF0Zm9ybXMgc3VwcG9ydGVkLCBleGFtcGxlOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRnRwVGVuZGFtIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNvbm5lY3Qgd2l0aCBmdHAgc2VydmVyXG4gICAqIEBwYXJhbSBhcmcxIHtzdHJpbmd9IEhvc3RuYW1lXG4gICAqIEBwYXJhbSBhcmcyIHtzdHJpbmd9IFVzZXJOYW1lXG4gICAqIEBwYXJhbSBhcmczIHtzdHJpbmd9IFBhc3N3b3JkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNvbm5lY3QoYXJnMTogc3RyaW5nLCBhcmcyOiBzdHJpbmcsIGFyZzM6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gdXBsb2FkIHdpdGggZnRwIHNlcnZlclxuICAqIEBwYXJhbSBhcmcxIHtzdHJpbmd9IHJlbW90ZVBhdGhcbiAgKiBAcGFyYW0gYXJnMiB7c3RyaW5nfSBEaXJlY3RvcnkgTmFtZVxuICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBsb2FkRmlsZShhcmcxOiBzdHJpbmcsIGFyZzI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gcmVuYW1lIGZvbGRlciB3aXRoIGZ0cCBzZXJ2ZXJcbiAgKiBAcGFyYW0gYXJnMSB7c3RyaW5nfSByZW1vdGVQYXRoXG4gICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgKi9cbiAgQENvcmRvdmEoKVxuICBmaW5kaW52ZW50b3J5ZGlyKGFyZzE6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gdXBsb2FkIHdpdGggZnRwIHNlcnZlclxuICAqIEBwYXJhbSBhcmcxIHtzdHJpbmd9IHJlbW90ZVBhdGhcbiAgKiBAcGFyYW0gYXJnMiB7c3RyaW5nfSBEaXJlY3RvcnkgTmFtZVxuICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBsb2FkaW52ZW50b3J5ZGlyKGFyZzE6IHN0cmluZywgYXJnMjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZW5hbWUgZm9sZGVyIHdpdGggZnRwIHNlcnZlclxuICAqIEBwYXJhbSBhcmcxIHtzdHJpbmd9IHJlbW90ZVBhdGhcbiAgKiBAcGFyYW0gYXJnMiB7c3RyaW5nfSBEaXJlY3RvcnkgTmFtZVxuICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICovXG4gIEBDb3Jkb3ZhKClcbiAgbW92ZWludmVudG9yeWRpcihhcmcxOiBzdHJpbmcsIGFyZzI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gZGlzY29ubmVjdCBmcm9tIHRoZSBmdHAgc2VydmVyXG4gICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG59XG4iXX0=