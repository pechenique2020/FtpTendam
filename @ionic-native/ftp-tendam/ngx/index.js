import { __decorate, __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FtpTendam = /** @class */ (function (_super) {
    __extends(FtpTendam, _super);
    function FtpTendam() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FtpTendam.prototype.connect = function (arg1, arg2, arg3) { return cordova(this, "connect", {}, arguments); };
    FtpTendam.prototype.createinventorydir = function (arg1, arg2) { return cordova(this, "createinventorydir", {}, arguments); };
    FtpTendam.prototype.uploadinventorydir = function (arg1, arg2) { return cordova(this, "uploadinventorydir", {}, arguments); };
    FtpTendam.prototype.moveinventorydir = function (arg1, arg2) { return cordova(this, "moveinventorydir", {}, arguments); };
    FtpTendam.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FtpTendam.pluginName = "FtpTendam";
    FtpTendam.plugin = "cordova-plugin-ftptendam";
    FtpTendam.pluginRef = "FtpTendam";
    FtpTendam.repo = "";
    FtpTendam.install = "";
    FtpTendam.installVariables = [];
    FtpTendam.platforms = ["android"];
    FtpTendam = __decorate([
        Injectable()
    ], FtpTendam);
    return FtpTendam;
}(IonicNativePlugin));
export { FtpTendam };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Z0cC10ZW5kYW0vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7OztHQVVHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUEwRixNQUFNLG9CQUFvQixDQUFDOztJQWtDN0YsNkJBQWlCOzs7O0lBVTlDLDJCQUFPLGFBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZO0lBV2hELHNDQUFrQixhQUFDLElBQVksRUFBRSxJQUFZO0lBWTdDLHNDQUFrQixhQUFDLElBQVksRUFBRSxJQUFZO0lBVzdDLG9DQUFnQixhQUFDLElBQVksRUFBRSxJQUFZO0lBVTNDLDhCQUFVOzs7Ozs7OztJQXREQyxTQUFTO1FBRHJCLFVBQVUsRUFBRTtPQUNBLFNBQVM7b0JBOUN0QjtFQThDK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgaXMgYSB0ZW1wbGF0ZSBmb3IgbmV3IHBsdWdpbiB3cmFwcGVyc1xuICpcbiAqIFRPRE86XG4gKiAtIEFkZC9DaGFuZ2UgaW5mb3JtYXRpb24gYmVsb3dcbiAqIC0gRG9jdW1lbnQgdXNhZ2UgKGltcG9ydGluZywgZXhlY3V0aW5nIG1haW4gZnVuY3Rpb25hbGl0eSlcbiAqIC0gUmVtb3ZlIGFueSBpbXBvcnRzIHRoYXQgeW91IGFyZSBub3QgdXNpbmdcbiAqIC0gUmVtb3ZlIGFsbCB0aGUgY29tbWVudHMgaW5jbHVkZWQgaW4gdGhpcyB0ZW1wbGF0ZSwgRVhDRVBUIHRoZSBAUGx1Z2luIHdyYXBwZXIgZG9jcyBhbmQgYW55IG90aGVyIGRvY3MgeW91IGFkZGVkXG4gKiAtIFJlbW92ZSB0aGlzIG5vdGVcbiAqXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBDb3Jkb3ZhSW5zdGFuY2UsIEluc3RhbmNlUHJvcGVydHksIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAbmFtZSBGdHAgVGVuZGFtXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGRvZXMgc29tZXRoaW5nXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGdHBUZW5kYW0gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Z0cC10ZW5kYW0nO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZ0cFRlbmRhbTogRnRwVGVuZGFtKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5mdHBUZW5kYW0uZnVuY3Rpb25OYW1lKCdIZWxsbycsIDEyMylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGdHBUZW5kYW0nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1mdHB0ZW5kYW0nLCAvLyBucG0gcGFja2FnZSBuYW1lLCBleGFtcGxlOiBjb3Jkb3ZhLXBsdWdpbi1jYW1lcmFcbiAgcGx1Z2luUmVmOiAnRnRwVGVuZGFtJywgLy8gdGhlIHZhcmlhYmxlIHJlZmVyZW5jZSB0byBjYWxsIHRoZSBwbHVnaW4sIGV4YW1wbGU6IG5hdmlnYXRvci5nZW9sb2NhdGlvblxuICByZXBvOiAnJywgLy8gdGhlIGdpdGh1YiByZXBvc2l0b3J5IFVSTCBmb3IgdGhlIHBsdWdpblxuICBpbnN0YWxsOiAnJywgLy8gT1BUSU9OQUwgaW5zdGFsbCBjb21tYW5kLCBpbiBjYXNlIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXG4gIGluc3RhbGxWYXJpYWJsZXM6IFtdLCAvLyBPUFRJT05BTCB0aGUgcGx1Z2luIHJlcXVpcmVzIHZhcmlhYmxlc1xuICBwbGF0Zm9ybXM6IFsnYW5kcm9pZCddIC8vIEFycmF5IG9mIHBsYXRmb3JtcyBzdXBwb3J0ZWQsIGV4YW1wbGU6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGdHBUZW5kYW0gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gY29ubmVjdCB3aXRoIGZ0cCBzZXJ2ZXJcbiAgICogQHBhcmFtIGFyZzEge3N0cmluZ30gSG9zdG5hbWVcbiAgICogQHBhcmFtIGFyZzIge3N0cmluZ30gVXNlck5hbWVcbiAgICogQHBhcmFtIGFyZzMge3N0cmluZ30gUGFzc3dvcmRcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY29ubmVjdChhcmcxOiBzdHJpbmcsIGFyZzI6IHN0cmluZywgYXJnMzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiBjcmVhdGUgZGlyZWN0b3J5IHdpdGggZnRwIHNlcnZlclxuICAqIEBwYXJhbSBhcmcxIHtzdHJpbmd9IHJlbW90ZVBhdGhcbiAgKiBAcGFyYW0gYXJnMiB7c3RyaW5nfSBEaXJlY3RvcnkgTmFtZVxuICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICovXG4gIEBDb3Jkb3ZhKClcbiAgY3JlYXRlaW52ZW50b3J5ZGlyKGFyZzE6IHN0cmluZywgYXJnMjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cblxuICAvKipcbiAgKiBUaGlzIGZ1bmN0aW9uIHVwbG9hZCB3aXRoIGZ0cCBzZXJ2ZXJcbiAgKiBAcGFyYW0gYXJnMSB7c3RyaW5nfSByZW1vdGVQYXRoXG4gICogQHBhcmFtIGFyZzIge3N0cmluZ30gRGlyZWN0b3J5IE5hbWVcbiAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAqL1xuICBAQ29yZG92YSgpXG4gIHVwbG9hZGludmVudG9yeWRpcihhcmcxOiBzdHJpbmcsIGFyZzI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG4gIC8qKlxuKiBUaGlzIGZ1bmN0aW9uIHJlbmFtZSBmb2xkZXIgd2l0aCBmdHAgc2VydmVyXG4qIEBwYXJhbSBhcmcxIHtzdHJpbmd9IHJlbW90ZVBhdGhcbiogQHBhcmFtIGFyZzIge3N0cmluZ30gRGlyZWN0b3J5IE5hbWVcbiogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiovXG4gIEBDb3Jkb3ZhKClcbiAgbW92ZWludmVudG9yeWRpcihhcmcxOiBzdHJpbmcsIGFyZzI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuOyAvLyBXZSBhZGQgcmV0dXJuOyBoZXJlIHRvIGF2b2lkIGFueSBJREUgLyBDb21waWxlciBlcnJvcnNcbiAgfVxuXG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiBkaXNjb25uZWN0IGZyb20gdGhlIGZ0cCBzZXJ2ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbn1cbiJdfQ==