var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FtpTendamOriginal = /** @class */ (function (_super) {
    __extends(FtpTendamOriginal, _super);
    function FtpTendamOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FtpTendamOriginal.prototype.connect = function (arg1, arg2, arg3) { return cordova(this, "connect", {}, arguments); };
    FtpTendamOriginal.prototype.uploadFile = function (arg1, arg2) { return cordova(this, "uploadFile", {}, arguments); };
    FtpTendamOriginal.prototype.createinventorydir = function (arg1, arg2) { return cordova(this, "createinventorydir", {}, arguments); };
    FtpTendamOriginal.prototype.uploadinventorydir = function (arg1, arg2) { return cordova(this, "uploadinventorydir", {}, arguments); };
    FtpTendamOriginal.prototype.uploadinventoryfile = function (arg1, arg2) { return cordova(this, "uploadinventoryfile", {}, arguments); };
    FtpTendamOriginal.prototype.moveinventorydir = function (arg1, arg2) { return cordova(this, "moveinventorydir", {}, arguments); };
    FtpTendamOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FtpTendamOriginal.pluginName = "FtpTendam";
    FtpTendamOriginal.plugin = "cordova-plugin-ftptendam";
    FtpTendamOriginal.pluginRef = "FtpTendam";
    FtpTendamOriginal.repo = "";
    FtpTendamOriginal.install = "";
    FtpTendamOriginal.installVariables = [];
    FtpTendamOriginal.platforms = ["android"];
    return FtpTendamOriginal;
}(IonicNativePlugin));
var FtpTendam = new FtpTendamOriginal();
export { FtpTendam };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Z0cC10ZW5kYW0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVlBLE9BQU8sOEJBQTBGLE1BQU0sb0JBQW9CLENBQUM7O0lBa0M3Riw2QkFBaUI7Ozs7SUFVOUMsMkJBQU8sYUFBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVk7SUFXaEQsOEJBQVUsYUFBQyxJQUFZLEVBQUUsSUFBWTtJQVdyQyxzQ0FBa0IsYUFBQyxJQUFZLEVBQUUsSUFBWTtJQVk3QyxzQ0FBa0IsYUFBQyxJQUFZLEVBQUUsSUFBWTtJQVc3Qyx1Q0FBbUIsYUFBQyxJQUFZLEVBQUUsSUFBWTtJQVk5QyxvQ0FBZ0IsYUFBQyxJQUFZLEVBQUUsSUFBWTtJQVUzQyw4QkFBVTs7Ozs7Ozs7b0JBM0haO0VBOEMrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBpcyBhIHRlbXBsYXRlIGZvciBuZXcgcGx1Z2luIHdyYXBwZXJzXG4gKlxuICogVE9ETzpcbiAqIC0gQWRkL0NoYW5nZSBpbmZvcm1hdGlvbiBiZWxvd1xuICogLSBEb2N1bWVudCB1c2FnZSAoaW1wb3J0aW5nLCBleGVjdXRpbmcgbWFpbiBmdW5jdGlvbmFsaXR5KVxuICogLSBSZW1vdmUgYW55IGltcG9ydHMgdGhhdCB5b3UgYXJlIG5vdCB1c2luZ1xuICogLSBSZW1vdmUgYWxsIHRoZSBjb21tZW50cyBpbmNsdWRlZCBpbiB0aGlzIHRlbXBsYXRlLCBFWENFUFQgdGhlIEBQbHVnaW4gd3JhcHBlciBkb2NzIGFuZCBhbnkgb3RoZXIgZG9jcyB5b3UgYWRkZWRcbiAqIC0gUmVtb3ZlIHRoaXMgbm90ZVxuICpcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIENvcmRvdmFJbnN0YW5jZSwgSW5zdGFuY2VQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBuYW1lIEZ0cCBUZW5kYW1cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZG9lcyBzb21ldGhpbmdcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZ0cFRlbmRhbSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZnRwLXRlbmRhbSc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZnRwVGVuZGFtOiBGdHBUZW5kYW0pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmZ0cFRlbmRhbS5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0Z0cFRlbmRhbScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZ0cHRlbmRhbScsIC8vIG5wbSBwYWNrYWdlIG5hbWUsIGV4YW1wbGU6IGNvcmRvdmEtcGx1Z2luLWNhbWVyYVxuICBwbHVnaW5SZWY6ICdGdHBUZW5kYW0nLCAvLyB0aGUgdmFyaWFibGUgcmVmZXJlbmNlIHRvIGNhbGwgdGhlIHBsdWdpbiwgZXhhbXBsZTogbmF2aWdhdG9yLmdlb2xvY2F0aW9uXG4gIHJlcG86ICcnLCAvLyB0aGUgZ2l0aHViIHJlcG9zaXRvcnkgVVJMIGZvciB0aGUgcGx1Z2luXG4gIGluc3RhbGw6ICcnLCAvLyBPUFRJT05BTCBpbnN0YWxsIGNvbW1hbmQsIGluIGNhc2UgdGhlIHBsdWdpbiByZXF1aXJlcyB2YXJpYWJsZXNcbiAgaW5zdGFsbFZhcmlhYmxlczogW10sIC8vIE9QVElPTkFMIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXG4gIHBsYXRmb3JtczogWydhbmRyb2lkJ10gLy8gQXJyYXkgb2YgcGxhdGZvcm1zIHN1cHBvcnRlZCwgZXhhbXBsZTogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZ0cFRlbmRhbSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBjb25uZWN0IHdpdGggZnRwIHNlcnZlclxuICAgKiBAcGFyYW0gYXJnMSB7c3RyaW5nfSBIb3N0bmFtZVxuICAgKiBAcGFyYW0gYXJnMiB7c3RyaW5nfSBVc2VyTmFtZVxuICAgKiBAcGFyYW0gYXJnMyB7c3RyaW5nfSBQYXNzd29yZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0KGFyZzE6IHN0cmluZywgYXJnMjogc3RyaW5nLCBhcmczOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cblxuICAvKipcbiAgKiBUaGlzIGZ1bmN0aW9uIHVwbG9hZCB3aXRoIGZ0cCBzZXJ2ZXJcbiAgKiBAcGFyYW0gYXJnMSB7c3RyaW5nfSByZW1vdGVQYXRoXG4gICogQHBhcmFtIGFyZzIge3N0cmluZ30gRGlyZWN0b3J5IE5hbWVcbiAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAqL1xuICBAQ29yZG92YSgpXG4gIHVwbG9hZEZpbGUoYXJnMTogc3RyaW5nLCBhcmcyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cblxuICAvKipcbiAgKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZSBkaXJlY3Rvcnkgd2l0aCBmdHAgc2VydmVyXG4gICogQHBhcmFtIGFyZzEge3N0cmluZ30gcmVtb3RlUGF0aFxuICAqIEBwYXJhbSBhcmcyIHtzdHJpbmd9IERpcmVjdG9yeSBOYW1lXG4gICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgKi9cbiAgQENvcmRvdmEoKVxuICBjcmVhdGVpbnZlbnRvcnlkaXIoYXJnMTogc3RyaW5nLCBhcmcyOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cblxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gdXBsb2FkIHdpdGggZnRwIHNlcnZlclxuICAqIEBwYXJhbSBhcmcxIHtzdHJpbmd9IHJlbW90ZVBhdGhcbiAgKiBAcGFyYW0gYXJnMiB7c3RyaW5nfSBEaXJlY3RvcnkgTmFtZVxuICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBsb2FkaW52ZW50b3J5ZGlyKGFyZzE6IHN0cmluZywgYXJnMjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiB1cGxvYWQgd2l0aCBmdHAgc2VydmVyXG4gICogQHBhcmFtIGFyZzEge3N0cmluZ30gcmVtb3RlUGF0aFxuICAqIEBwYXJhbSBhcmcyIHtzdHJpbmd9IERpcmVjdG9yeSBOYW1lXG4gICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgKi9cbiAgQENvcmRvdmEoKVxuICB1cGxvYWRpbnZlbnRvcnlmaWxlKGFyZzE6IHN0cmluZywgYXJnMjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cblxuICAvKipcbiAgKiBUaGlzIGZ1bmN0aW9uIHJlbmFtZSBmb2xkZXIgd2l0aCBmdHAgc2VydmVyXG4gICogQHBhcmFtIGFyZzEge3N0cmluZ30gcmVtb3RlUGF0aFxuICAqIEBwYXJhbSBhcmcyIHtzdHJpbmd9IERpcmVjdG9yeSBOYW1lXG4gICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgKi9cbiAgQENvcmRvdmEoKVxuICBtb3ZlaW52ZW50b3J5ZGlyKGFyZzE6IHN0cmluZywgYXJnMjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cblxuICAvKipcbiAgKiBUaGlzIGZ1bmN0aW9uIGRpc2Nvbm5lY3QgZnJvbSB0aGUgZnRwIHNlcnZlclxuICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHNvbWV0aGluZyBoYXBwZW5zXG4gICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzY29ubmVjdCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cblxufVxuIl19